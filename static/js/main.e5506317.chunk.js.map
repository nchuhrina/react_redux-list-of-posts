{"version":3,"sources":["helpers/api.ts","store/index.ts","App.tsx","index.tsx"],"names":["getAll","url","fetch","then","response","json","getAppData","a","postsFromServer","usersFromServer","commentsFromServer","map","post","postUser","find","user","userId","id","postComment","filter","comment","postId","getPosts","state","posts","isLoading","loading","getQuery","query","getVisiblePosts","title","body","toLocaleLowerCase","replace","includes","filterQuery","initialState","errorMessage","store","createStore","action","type","postTitle","composeWithDevTools","App","dispatch","useDispatch","useSelector","visiblePosts","setFilterQueryWithDebounce","useCallback","debounce","value","className","length","onClick","initPosts","catch","e","message","disabled","onChange","target","setQuery","key","name","email","pbody","href","Root","ReactDOM","render","document","getElementById"],"mappings":"iTAEMA,EAAS,SAAIC,GAAJ,OACbC,MAAM,GAAD,OAHS,kEAGT,OAAcD,EAAd,UACFE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAOlBC,EAAU,uCAAG,gCAAAC,EAAA,sEAJHP,EAAuB,UAIpB,cAClBQ,EADkB,gBAHHR,EAAuB,UAGpB,cAElBS,EAFkB,gBAFAT,EAA0B,aAE1B,cAGlBU,EAHkB,yBAKjBF,EAAgBG,KAAI,SAACC,GAAD,mBAAC,eACvBA,GADsB,IAEzBC,SAAUJ,EAAgBK,MAAK,SAACC,GAAD,OAA0BH,EAAKI,SAAWD,EAAKE,MAE9EC,YAAaR,EAAmBS,QAAO,SAACC,GAAD,OAAgCR,EAAKK,KAAOG,EAAQC,gBATrE,4CAAH,qD,uBC2BVC,EAAW,SAACC,GAAD,OAAsBA,EAAMC,OACvCC,EAAY,SAACF,GAAD,OAAsBA,EAAMG,SAExCC,EAAW,SAACJ,GAAD,OAAsBA,EAAMK,OACvCC,EAAkB,SAACN,GAC9B,OAAOA,EAAMC,MAAML,QAAO,gBAAGW,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,MAAqB,UAAID,EAAJ,YAAaC,GACzDC,oBACAC,QAAQ,OAAQ,KAChBC,SAASX,EAAMY,YAAYH,oBAAoBC,QAAQ,OAAQ,UAY9DG,EAA0B,CAC9BZ,MAAO,GACPE,SAAS,EACTW,aAAc,GACdT,MAAO,GACPO,YAAa,IAsDAG,EALDC,uBA7CM,WAAyD,IAAxDhB,EAAuD,uDAA/Ca,EAAcI,EAAiC,uCAC1E,OAAQA,EAAOC,MACb,IAjEkB,gBAkEhB,OAAO,2BACFlB,GADL,IAEEG,SAAS,EACTW,aAAc,KAGlB,IAvEe,aAwEb,OAAO,2BACFd,GADL,IAEEG,SAAS,EACTF,MAAOgB,EAAOhB,QAGlB,IA7EiB,eA8Ef,OAAO,2BACFD,GADL,IAEEc,aAAcG,EAAOH,aACrBX,SAAS,IAGb,IAnFgB,cAoFd,OAAO,2BACFH,GADL,IAEEC,MAAOD,EAAMC,MAAML,QAAO,SAAAP,GAAI,OAAIA,EAAKkB,QAAUU,EAAOE,eAE5D,IAvFc,YAwFZ,OAAO,2BACFnB,GADL,IAEEK,MAAOY,EAAOZ,QAElB,IA3FqB,mBA4FnB,OAAO,2BACFL,GADL,IAEEY,YAAaK,EAAOL,cAGxB,QACE,OAAOZ,KAOXoB,iCChBaC,EAhFH,WACV,IAAMC,EAAWC,cACXtB,EAAQuB,YAAYzB,GACpBI,EAAUqB,YAAYtB,GACtBG,EAAQmB,YAAYpB,GACpBqB,EAAeD,YAAYlB,GAa3BoB,EAA6BC,sBACjCC,KAAS,SAACC,GAAD,OAAmBP,EDLwB,CACtDJ,KAxBuB,mBAyBvBN,YCGsDiB,MAAS,KAC7D,IAUF,OACE,6BACE,wBAAIC,UAAU,SAAd,uBACkB,IAAjB7B,EAAM8B,OACL,4BAAQb,KAAK,SAASc,QA3BL,WACrBV,EDf+B,CAAEJ,KAPf,kBCuBlBnC,IACGH,MAAK,SAAAK,GACJqC,EDjBiB,SAACrB,GAAD,MAIhB,CACPiB,KAZiB,aAajBjB,SCWegC,CAAUhD,OAEpBiD,OAAM,SAAAC,GACLb,EAAkBa,EAAEC,QDQwBtB,kBCYGuB,SAAUlC,GACtDA,EAAU,aAAe,QAG5B,oCACE,2BACE2B,UAAU,SACVZ,KAAK,OACLW,MAAOxB,EACPiC,SApBa,SAACH,GAA4C,IAC1DN,EAAUM,EAAEI,OAAZV,MAERP,EDhBoB,SAACjB,GAAD,MAAoB,CAC1Ca,KArBgB,YAsBhBb,SCcWmC,CAASX,IAClBH,EAA2BG,MAmBrB,yBAAKC,UAAU,kBACZL,EACErC,KAAI,gBACHM,EADG,EACHA,GAAIJ,EADD,EACCA,SAAUiB,EADX,EACWA,MAAOC,EADlB,EACkBA,KAAMb,EADxB,EACwBA,YADxB,OAGH,yBAAKmC,UAAU,OAAOW,IAAK/C,GACzB,wBAAIoC,UAAU,cAAcvB,GAC5B,uBAAGuB,UAAU,kBAAb,OAA+BxC,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAUoD,MACzC,uBAAGZ,UAAU,aAAatB,GAC1B,wBAAIsB,UAAU,qBACXnC,EAAYP,KAAI,gBAAGsD,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,MAAhB,OACf,wBAAId,UAAU,WACZ,wBAAIA,UAAU,gBAAgBY,GAC9B,uBAAGG,KAAI,iBAAYF,GAASb,UAAU,iBAAiBa,GACvD,uBAAGb,UAAU,gBAAgBc,QAInC,4BACE1B,KAAK,SACLY,UAAU,gBACVE,QAAS,kBAAMV,ED7De,CAChDJ,KAlBkB,cAmBlBC,UC2DqDZ,MAHrC,uBC1EZuC,EAAO,kBACX,kBAAC,IAAD,CAAU/B,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNgC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.e5506317.chunk.js","sourcesContent":["const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAll = <T>(url: string): Promise<T[]> => (\n  fetch(`${API_URL}${url}.json`)\n    .then(response => response.json())\n);\n\nconst getPosts = () => getAll<PostFromServer>('/posts');\nconst getUsers = () => getAll<UserFromServer>('/users');\nconst getComments = () => getAll<CommentFromServer>('/comments');\n\nexport const getAppData = async () => {\n  const postsFromServer = await getPosts();\n  const usersFromServer = await getUsers();\n  const commentsFromServer = await getComments();\n\n  return postsFromServer.map((post) => ({\n    ...post,\n    postUser: usersFromServer.find((user: UserFromServer) => post.userId === user.id),\n    // eslint-disable-next-line max-len\n    postComment: commentsFromServer.filter((comment: CommentFromServer) => post.id === comment.postId),\n  }));\n};\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst INIT_POSTS = 'INIT_TODOS';\nconst HANDLE_ERROR = 'HANDLE_ERROR';\nconst DELETE_POST = 'DELETE_POST';\nconst SET_QUERY = 'SET_QUERY';\nconst SET_FILTER_QUERY = 'SET_FILTER_QUERY';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const initPosts = (posts: {\n  postUser: UserFromServer\n  | undefined; postComment: CommentFromServer[];\n  id: number; title: string; body: string; userId: number;\n}[]) => ({\n  type: INIT_POSTS,\n  posts,\n});\nexport const handleError = (errorMessage: string) => ({\n  type: HANDLE_ERROR,\n  errorMessage,\n});\nexport const deletePost = (postTitle: string) => ({\n  type: DELETE_POST,\n  postTitle,\n});\nexport const setQuery = (query: string) => ({\n  type: SET_QUERY,\n  query,\n});\nexport const setFilterQuery = (filterQuery: string) => ({\n  type: SET_FILTER_QUERY,\n  filterQuery,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getPosts = (state: RootState) => state.posts;\nexport const isLoading = (state: RootState) => state.loading;\nexport const hasError = (state: RootState) => state.errorMessage;\nexport const getQuery = (state: RootState) => state.query;\nexport const getVisiblePosts = (state: RootState) => {\n  return state.posts.filter(({ title, body }) => (`${title} ${body}`)\n    .toLocaleLowerCase()\n    .replace(/\\s*/g, ' ')\n    .includes(state.filterQuery.toLocaleLowerCase().replace(/\\s*/g, ' ')));\n};\n\n// Initial state\nexport type RootState = {\n  posts: Post[];\n  loading: boolean;\n  errorMessage: string;\n  query: string;\n  filterQuery: string;\n};\n\nconst initialState: RootState = {\n  posts: [],\n  loading: false,\n  errorMessage: '',\n  query: '',\n  filterQuery: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction): RootState => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        errorMessage: '',\n      };\n\n    case INIT_POSTS:\n      return {\n        ...state,\n        loading: false,\n        posts: action.posts,\n      };\n\n    case HANDLE_ERROR:\n      return {\n        ...state,\n        errorMessage: action.errorMessage,\n        loading: false,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post.title !== action.postTitle),\n      };\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.query,\n      };\n    case SET_FILTER_QUERY:\n      return {\n        ...state,\n        filterQuery: action.filterQuery,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport { getAppData } from './helpers/api';\n\nimport './App.css';\nimport {\n  startLoading,\n  initPosts,\n  getPosts,\n  isLoading,\n  deletePost,\n  hasError,\n  getQuery,\n  setQuery,\n  setFilterQuery, getVisiblePosts,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const loading = useSelector(isLoading);\n  const query = useSelector(getQuery);\n  const visiblePosts = useSelector(getVisiblePosts);\n\n  const handleGetPosts = () => {\n    dispatch(startLoading());\n    getAppData()\n      .then(postsFromServer => {\n        dispatch(initPosts(postsFromServer));\n      })\n      .catch(e => {\n        dispatch(hasError(e.message));\n      });\n  };\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce((value: string) => dispatch(setFilterQuery(value)), 500),\n    [],\n  );\n\n  const handleSetQuery = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    dispatch(setQuery(value));\n    setFilterQueryWithDebounce(value);\n  };\n\n  return (\n    <div>\n      <h1 className=\"title\">Redux list of posts</h1>\n      {posts.length === 0 ? (\n        <button type=\"button\" onClick={handleGetPosts} disabled={loading}>\n          {loading ? 'Loading...' : 'Load'}\n        </button>\n      ) : (\n        <>\n          <input\n            className=\"search\"\n            type=\"text\"\n            value={query}\n            onChange={handleSetQuery}\n\n          />\n          <div className=\"post-container\">\n            {visiblePosts\n              .map(({\n                id, postUser, title, body, postComment,\n              }) => (\n                <div className=\"post\" key={id}>\n                  <h2 className=\"post_title\">{title}</h2>\n                  <p className=\"post_name_user\">{postUser?.name}</p>\n                  <p className=\"post_body\">{body}</p>\n                  <ul className=\"comment-container\">\n                    {postComment.map(({ name, email, pbody }) => (\n                      <li className=\"comment\">\n                        <h4 className=\"comment_name\">{name}</h4>\n                        <a href={`mailto:${email}`} className=\"comment_email\">{email}</a>\n                        <p className=\"comment_body\">{pbody}</p>\n                      </li>\n                    ))}\n                  </ul>\n                  <button\n                    type=\"button\"\n                    className=\"button_delete\"\n                    onClick={() => dispatch(deletePost(title))}\n                  >\n                    Delete post\n                  </button>\n                </div>\n              ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}